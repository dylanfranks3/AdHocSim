from .location import Location
class Node:
    def __init__(self, uid,
                 ) -> None:
        self.location  = None# geographic location
        self.uid = uid
        self.data = {"TIN" : [], # (In from Tunnel) entries describe a packet that was generated by this node's traffic generation process and that is being passed down to the routing layer to be sent out on its way.
                     "TOUT" : [], # (Out over Tunnel) entries describe a packed generated by a traffic generation
                     "SIN": [], # (In from Socket) 
                     "SOUT":[]} # Out from Socket
#That is, if a packet is generated by the traffic 
#gen program at node 1 bound for node 3, and to get there it bounces 
#from 1 to 2 then 2 to 3, then you will see a TIN for this packet at 1, 
#a TOUT at 3, and a SOUT at 1, SIN at 2, SOUT at 2, and SIN at 3.                    

        self.socketWaiting = [] # a list of Packets waiting to be sent assume priority of order (first)
        self.historicLocation = [self.location] # historic store of data
        self.visualDot = None


    def updateLocation(self,newLocation):
        # update historic store, and move the node
        if self.location is not None:
            self.location.updateLocation(newLocation)
            self.historicLocation.append(self.location) 
        else:
            self.location = newLocation


    def removePacket(self,packet):
        self.socketWaiting.remove(packet)
        self.data["SOUT"].append(packet) # say that it's leaving the socket


    def addPacket(self, packet):
        if packet.dest == self:
            self.data["TOUT"].append(packet)
            return # if it's reached its dest then add to tout
        self.socketWaiting.append(packet)
        if packet.src == self:
            self.data["TIN"].append(packet) # otherwise this packet needs processing
        else:
            self.data["SIN"].append(packet)

    def getLocation(self):
        return self.location.location
        

        




    

        

    
    