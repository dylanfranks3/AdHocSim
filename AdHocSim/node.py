from AdHocSim.location import Location
from AdHocSim.packet import Packet

class Node:
    def __init__(
        self,
        uid,
    ) -> None:
        self.location = None  # geographic location
        self.uid = uid
        self.time = 0
        self.data:dict[str,list[Packet,float]] = {
            "TIN": [],  # (In from Tunnel) entries describe a packet that was generated by this node's traffic generation process and that is being passed down to the routing layer to be sent out on its way.
            "TOUT": [],  # (Out over Tunnel) entries describe a packed generated by a traffic generation
            "SIN": [],  # (In from Socket)
            "SOUT": [],
        }  # Out from Socket
        # That is, if a packet is generated by the traffic
        # gen program at node 1 bound for node 3, and to get there it bounces
        # from 1 to 2 then 2 to 3, then you will see a TIN for this packet at 1,
        # a TOUT at 3, and a SOUT at 1, SIN at 2, SOUT at 2, and SIN at 3.

        self.socketWaiting:list[Packet] = (
            []
        )  # a list of Packets waiting to be sent assume priority of order (first)
        self.historicLocation:Location = [self.location]  # historic store of data
        self.visualDot = None

    def updateLocation(self, newLocation: Location):
        # update historic store, and move the node
        if self.location is not None:
            self.location.updateLocation(newLocation)
            self.historicLocation.append(self.location)
        else:
            self.location = newLocation

    def removePacket(self, packet: Packet):
        self.socketWaiting = [i for i in self.socketWaiting if i != packet]
        self.data["SOUT"].append([packet,self.time])  # say that it's leaving the socket
  
  
  
    def addPacket(self, packet:Packet):
        if packet.dest == self:
            if packet not in self.data["SIN"]:
                self.data["SIN"].append([packet,self.time])
            if packet not in self.data["TOUT"]:
                self.data["TOUT"].append([packet,self.time])
            return  # if it's reached its dest then add to tout
        self.socketWaiting.append(packet)
        if packet.src == self:
            if packet not in self.data["TIN"]:
                self.data["TIN"].append([packet,self.time])  # otherwise this packet needs processing
        if packet.src != self or packet.dest != self :
            if packet not in self.data["SIN"]:
                self.data["SIN"].append([packet,self.time])
 

    def getLocation(self):
        return self.location.location
